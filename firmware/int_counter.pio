


; 20ms is 20,000us is 20,000,000ns
; a 64 byte DMA to the zx takes 25us which is 25,000ns
; margin of error will be 5us before INT, which is 5,000ns 
; so pause needs to start 30us, or 30,000ns, before int
; which is 19,970,000ns after the previous one
;
;   at 150MHz, it's 6.66ns per cycle, so 3,994,000 cycles
;   at 200MHz, it's 5ns per cycle, so 3,994,000 cycles
; set flag to core high at that point to suspend DMA
; wait for /INT
; once it's passed it's safe to turn off the flag



.program int_counter



.wrap_target

  wait 0 pin 0              ; wait for the /INT to go low

  pull block                ; fetch the countdown loop value from core (DMA)
  mov x, osr

  set y, 0                  ; send a 0 to the core C variable, Z80DMA is OK to use at this point
  mov isr, y              
  push noblock

; Test signal, can be seen on 'scope
  set pins, 0               ; test signal low indicates Z80DMA is OK to use

timer_loop:                 ; countdown the timer to close to, but not up to, the next /INT
  jmp x--, timer_loop       ; when this expires the Z80DMA needs to be held off

  set y, 1                  ; send a 1 to the core, suppression active
  mov isr, y              
  push noblock

  set pins, 1               ; test signal high indicates Z80DMA is now suppressed
                            ; loop back to the top. the Z80DMA is held off until 
                            ; the next /INT has appeared

.wrap




% c-sdk {

/*
 *
 */
void int_counter_program_init(PIO pio, uint sm, uint offset, uint int_pin, uint test_pin )
{
  /* Set pins up for PIO use */
  pio_gpio_init(pio, int_pin);
  pio_gpio_init(pio, test_pin);

  /* Set input pin to be input */
  pio_sm_set_consecutive_pindirs(pio, sm, int_pin,  1, false);
  pio_sm_set_consecutive_pindirs(pio, sm, test_pin, 1, true);

  pio_sm_config c = int_counter_program_get_default_config(offset);
  sm_config_set_in_pins(&c, int_pin);
  sm_config_set_set_pins(&c, test_pin, 1);

  /* Initialise the state machine */
  pio_sm_init(pio, sm, offset, &c);
}
%}
